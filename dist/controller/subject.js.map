{"version":3,"sources":["../../src/controller/subject.js"],"names":["api","use","req","res","next","append","post","findById","params","studentId","err","student","send","newSubject","title","body","description","teacher","term","_id","save","subjects","push","json","message","get","find","subjectId","subject","console","log","patch","undefined","delete","id","pull","remove","assignment","status"],"mappings":"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","file":"subject.js","sourcesContent":["import {Router} from 'express'\r\nimport { authenticate } from '../middleware/authMiddleware'\r\n\r\nimport Student from '../model/student'\r\nimport Subject from '../model/subject'\r\nimport Assignment from \"../model/assignment\"\r\n\r\nexport default () => {\r\n    let api = Router()\r\n\r\n    api.use((req, res, next) => {\r\n        res.append('Access-Control-Allow-Origin', ['*'])\r\n        res.append('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE')\r\n        res.append('Access-Control-Allow-Headers', 'Content-Type')\r\n        next()\r\n    })\r\n\r\n    // '/subject/...' Create new subject\r\n    api.post('/create/:studentId', authenticate, (req, res) => {\r\n                Student.findById(req.params.studentId, (err, student) => {\r\n                    if(err){\r\n                        res.send(err+' :err finding student by id')\r\n                    }\r\n                    let newSubject = new Subject()\r\n                    newSubject.title = req.body.title\r\n                    newSubject.description = req.body.description\r\n                    newSubject.teacher = student.teacher\r\n                    newSubject.term = student.term\r\n                    newSubject.student = student._id\r\n                    newSubject.save(err => {\r\n                        if (err) {\r\n                            res.send(err+' :err saving new subject')\r\n                        }\r\n                        student.subjects.push(newSubject)\r\n                        student.save(err => {\r\n                            if(err){\r\n                                res.send(err+' :err saving subject to student')\r\n                            }\r\n                            res.json({message: 'new subject saved'})\r\n                        })\r\n                    })\r\n                })\r\n    })\r\n\r\n    // Get subjects by studentId\r\n    api.get('/student/:studentId', (req, res) => {\r\n        Subject.find({student: req.params.studentId}, (err, subjects) => {\r\n            if(subjects === null){\r\n                res.json('subjects not found')\r\n            }\r\n            else if (err) {\r\n                res.send(err)\r\n            }\r\n            else {\r\n                res.json(subjects)\r\n            }\r\n        })\r\n    })\r\n\r\n    //Get subject by id\r\n    api.get('/:subjectId', (req, res) => {\r\n        Subject.findById(req.params.subjectId, (err, subject) => {\r\n            console.log(subject)\r\n            if(subject === null){\r\n                res.json('subject not found')\r\n            }\r\n            else if (err) {\r\n                res.send(err);\r\n            }\r\n            else {\r\n                res.json(subject);\r\n            }\r\n        });\r\n    })\r\n\r\n    // Update subject basic info\r\n    api.patch('/update/:subjectId', authenticate, (req, res) => {\r\n        Subject.findById(req.params.subjectId, (err, subject) => {\r\n            if (err) {\r\n                res.send(err)\r\n            }\r\n            if (req.body.title !== undefined) {\r\n                subject.title = req.body.title\r\n            }\r\n            if (req.body.description !== undefined) {\r\n                subject.description = req.body.description\r\n            }\r\n\r\n            subject.save(err => {\r\n                if (err) {\r\n                    res.send(err)\r\n                }\r\n                res.json({message: 'subject info updated successfully'})\r\n            })\r\n        })\r\n    })\r\n\r\n    // Delete subject\r\n    api.delete('/remove/:subjectId', authenticate, (req, res) => {\r\n        let id = req.params.subjectId\r\n\r\n        Subject.findById(id, (err, subject) => {\r\n            if (err) {\r\n                res.send(err + ' :err finding subject by id')\r\n            }\r\n            Student.find({subjects: id}, (err, student) => {\r\n                if (err) {\r\n                    res.send(err + ' :err finding student by subjectId')\r\n                }\r\n                student[0].subjects.pull(subject)\r\n                student[0].save(err => {\r\n                    if (err) {\r\n                        res.send(err + ' :err saving student')\r\n                    }\r\n                })\r\n            })\r\n            Subject.remove({_id: req.params.subjectId}, err => {\r\n                if (err) {\r\n                    res.send(err + ' :err removing Subject')\r\n                }\r\n                Assignment.remove({subject: id}, (err, assignment) => {\r\n                    if (err) {\r\n                        res.send(err+' :err removing assignment in subject')\r\n                    }\r\n                    if (assignment === null) {\r\n                        res.status(404).send(\"assignment not found\")\r\n                    }\r\n                })\r\n            })\r\n        })\r\n        res.json({message: \"subject successfully removed\"})\r\n    })\r\n\r\n    return api\r\n}"]}