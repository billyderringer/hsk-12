{"version":3,"sources":["../../src/controller/student.js"],"names":["api","use","req","res","next","append","post","findById","params","termId","err","term","send","newStudent","firstName","body","lastName","gradeLevel","teacher","_id","save","students","push","json","message","patch","studentId","student","undefined","get","find","console","log","delete","id","pull","remove","subject","status","assignment"],"mappings":"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","file":"student.js","sourcesContent":["import {Router} from 'express'\r\nimport { authenticate } from '../middleware/authMiddleware'\r\n\r\nimport SchoolTerm from '../model/schoolTerm'\r\nimport Student from '../model/student'\r\nimport Assignment from \"../model/assignment\"\r\nimport Subject from \"../model/subject\"\r\n\r\nexport default () => {\r\n    let api = Router()\r\n\r\n    api.use((req, res, next) => {\r\n        res.append('Access-Control-Allow-Origin', ['*'])\r\n        res.append('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE')\r\n        res.append('Access-Control-Allow-Headers', 'Content-Type')\r\n        next()\r\n    })\r\n\r\n    // '/student/...' - Create new student\r\n    api.post('/create/:termId', authenticate, (req, res) => {\r\n        SchoolTerm.findById(req.params.termId, (err, term) => {\r\n            if(err){\r\n                res.send(err+' :err finding term by id')\r\n            }\r\n            let newStudent = new Student();\r\n            newStudent.firstName = req.body.firstName\r\n            newStudent.lastName = req.body.lastName\r\n            newStudent.gradeLevel = req.body.gradeLevel\r\n            newStudent.teacher = term.teacher\r\n            newStudent.term = term._id\r\n            newStudent.save(err => {\r\n                if (err) {\r\n                    res.send(err+' :err saving new student')\r\n                }\r\n                term.students.push(newStudent)\r\n                term.save(err => {\r\n                    if(err){\r\n                        res.send(err+' :err saving student to term')\r\n                    }\r\n                    res.json({message: 'new student saved'})\r\n                })\r\n            })\r\n        })\r\n    })\r\n\r\n    // Update student basic info\r\n    api.patch('/update/:studentId', authenticate, (req, res) => {\r\n        Student.findById(req.params.studentId, (err, student) => {\r\n            if (err) {\r\n                res.send(err)\r\n            }\r\n            if (req.body.firstName !== undefined) {\r\n                student.firstName = req.body.firstName\r\n            }\r\n            if (req.body.lastName !== undefined) {\r\n                student.lastName = req.body.lastName\r\n            }\r\n            if (req.body.gradeLevel !== undefined) {\r\n                student.gradeLevel = req.body.gradeLevel\r\n            }\r\n\r\n            student.save(err => {\r\n                if (err) {\r\n                    res.send(err)\r\n                }\r\n                res.json({message: 'student info updated successfully'})\r\n            })\r\n        })\r\n    })\r\n\r\n    // Get students by termId\r\n    api.get('/term/:termId', (req, res) => {\r\n        Student.find({term: req.params.termId}, (err, students) => {\r\n            if(students === null){\r\n                res.json('students not found')\r\n            }\r\n            else if (err) {\r\n                res.send(err)\r\n            }\r\n            else {\r\n                res.json(students)\r\n            }\r\n        })\r\n    })\r\n\r\n    //Get student by id\r\n    api.get('/:studentId', (req, res) => {\r\n        Student.findById(req.params.studentId, (err, student) => {\r\n            console.log(student)\r\n            if(student === null){\r\n                res.json('student not found')\r\n            }\r\n            else if (err) {\r\n                res.send(err);\r\n            }\r\n            else {\r\n                res.json(student);\r\n            }\r\n        });\r\n    })\r\n\r\n    // Delete student\r\n    api.delete('/remove/:studentId', authenticate, (req, res) => {\r\n        let id = req.params.studentId\r\n\r\n        Student.findById(id, (err, student) => {\r\n            if (err) {\r\n                res.send(err + ' :err finding student by id')\r\n            }\r\n            SchoolTerm.find({students: id}, (err, term) => {\r\n                if (err) {\r\n                    res.send(err + ' :err finding term by studentId')\r\n                }\r\n                term[0].students.pull(student)\r\n                term[0].save(err => {\r\n                    if (err) {\r\n                        res.send(err + ' :err saving term')\r\n                    }\r\n                })\r\n            })\r\n            Student.remove({_id: req.params.studentId}, err => {\r\n                if (err) {\r\n                    res.send(err + ' :err removing Student')\r\n                }\r\n                Subject.remove({student: id}, (err, subject) => {\r\n                    if (err) {\r\n                        res.send(err+' :err removing subject in student')\r\n                    }\r\n                    if (subject === null) {\r\n                        res.status(404).send(\"subject not found\")\r\n                    }\r\n\r\n                    Assignment.remove({student: id}, (err, assignment) => {\r\n                        if (err) {\r\n                            res.send(err+' :err removing assignment in student')\r\n                        }\r\n                        if (assignment === null) {\r\n                            res.status(404).send(\"assignment not found\")\r\n                        }\r\n                    })\r\n                })\r\n            })\r\n        })\r\n        res.json({message: \"student successfully removed\"})\r\n    })\r\n\r\n    return api\r\n}"]}