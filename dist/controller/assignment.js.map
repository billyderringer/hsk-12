{"version":3,"sources":["../../src/controller/assignment.js"],"names":["api","use","req","res","next","append","post","findById","params","subjectId","err","subject","send","newAssignment","title","body","description","assignmentType","correctAnswers","incorrectAnswers","grade","teacher","term","student","_id","save","assignments","push","json","message","get","find","assignmentId","assignment","console","log","patch","undefined","delete","id","pull","remove"],"mappings":"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","file":"assignment.js","sourcesContent":["import {Router} from 'express'\r\nimport { authenticate } from '../middleware/authMiddleware'\r\nimport Subject from '../model/subject'\r\nimport Assignment from '../model/assignment'\r\n\r\nexport default () => {\r\n    let api = Router()\r\n\r\n    api.use((req, res, next) => {\r\n        res.append('Access-Control-Allow-Origin', ['*'])\r\n        res.append('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE')\r\n        res.append('Access-Control-Allow-Headers', 'Content-Type')\r\n        next()\r\n    })\r\n\r\n    // '/assignment/...' Create new assignment\r\n    api.post('/create/:subjectId', authenticate, (req, res) => {\r\n        Subject.findById(req.params.subjectId, (err, subject) => {\r\n            if(err){\r\n                res.send(err+' :err finding subject by id')\r\n            }\r\n            let newAssignment = new Assignment()\r\n            newAssignment.title = req.body.title\r\n            newAssignment.description = req.body.description\r\n            newAssignment.assignmentType = req.body.assignmentType\r\n            newAssignment.correctAnswers = req.body.correctAnswers\r\n            newAssignment.incorrectAnswers = req.body.incorrectAnswers\r\n            newAssignment.grade = req.body.grade\r\n            newAssignment.teacher = subject.teacher\r\n            newAssignment.term = subject.term\r\n            newAssignment.student = subject.student\r\n            newAssignment.subject = subject._id\r\n            newAssignment.save(err => {\r\n                if (err) {\r\n                    res.send(err+' :err saving new subject')\r\n                }\r\n                subject.assignments.push(newAssignment)\r\n                subject.save(err => {\r\n                    if(err){\r\n                        res.send(err+' :err saving assignment to subject')\r\n                    }\r\n                    res.json({message: 'new assignment saved'})\r\n                })\r\n            })\r\n        })\r\n    })\r\n\r\n    // Get assignments by subjectId\r\n    api.get('/subject/:subjectId', (req, res) => {\r\n        Assignment.find({subject: req.params.subjectId}, (err, assignments) => {\r\n            if(assignments === null){\r\n                res.json('assignments not found')\r\n            }\r\n            else if (err) {\r\n                res.send(err)\r\n            }\r\n            else {\r\n                res.json(assignments)\r\n            }\r\n        })\r\n    })\r\n\r\n    //Get assignment by id\r\n    api.get('/:assignmentId', (req, res) => {\r\n        Assignment.findById(req.params.assignmentId, (err, assignment) => {\r\n            console.log(assignment)\r\n            if(assignment === null){\r\n                res.json('assignment not found')\r\n            }\r\n            else if (err) {\r\n                res.send(err);\r\n            }\r\n            else {\r\n                res.json(assignment);\r\n            }\r\n        });\r\n    })\r\n\r\n    // Update assignment basic info\r\n    api.patch('/update/:assignmentId', authenticate, (req, res) => {\r\n        Assignment.findById(req.params.assignmentId, (err, assignment) => {\r\n            if (err) {\r\n                res.send(err)\r\n            }\r\n            if (req.body.title !== undefined) {\r\n                assignment.title = req.body.title\r\n            }\r\n            if (req.body.description !== undefined) {\r\n                assignment.description = req.body.description\r\n            }\r\n            if (req.body.assignmentType !== undefined) {\r\n                assignment.assignmentType = req.body.assignmentType\r\n            }\r\n            if (req.body.correctAnswers !== undefined) {\r\n                assignment.correctAnswers = req.body.correctAnswers\r\n            }\r\n            if (req.body.incorrectAnswers !== undefined) {\r\n                assignment.incorrectAnswers = req.body.incorrectAnswers\r\n            }\r\n            if (req.body.grade !== undefined) {\r\n                assignment.grade = req.body.grade\r\n            }\r\n\r\n            assignment.save(err => {\r\n                if (err) {\r\n                    res.send(err)\r\n                }\r\n                res.json({message: 'assignment info updated successfully'})\r\n            })\r\n        })\r\n    })\r\n\r\n    // Delete assignment\r\n    api.delete('/remove/:assignmentId', authenticate, (req, res) => {\r\n        let id = req.params.assignmentId\r\n\r\n        Assignment.findById(id, (err, assignment) => {\r\n            if (err) {\r\n                res.send(err + ' :err finding assignment by id')\r\n            }\r\n            Subject.find({assignments: id}, (err, subject) => {\r\n                if (err) {\r\n                    res.send(err + ' :err finding subject by assignmentId')\r\n                }\r\n                subject[0].assignments.pull(assignment)\r\n                subject[0].save(err => {\r\n                    if (err) {\r\n                        res.send(err + ' :err saving subject')\r\n                    }\r\n                })\r\n            })\r\n            Assignment.remove({_id: req.params.assignmentId}, err => {\r\n                if (err) {\r\n                    res.send(err + ' :err removing Assignment')\r\n                }\r\n            })\r\n        })\r\n        res.json({message: \"assignment successfully removed\"})\r\n    })\r\n\r\n    return api\r\n}"]}